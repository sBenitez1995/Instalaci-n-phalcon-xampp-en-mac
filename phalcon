Pasos de instalación de phalcon en xampp para mac



-Agrega extension phalcon.so a tu php.ini (La ruta para acceder al php.ini te la indicará en el phpinfo|Loaded Configuration File):
	-> extension=phalcon.so
-Nos vamos a https://github.com/majksner/php-phalcon-mamp, y buscamos la versión del phalcon que coincida con nuestra versión php del xampp que la podremos visualizar en el phpinfo, descargamos la versión y la pegamos en la ruta que aparezca en extension_dir que en nuestro caso es /Applications/XAMPP/xamppfiles/lib/php/extensions/no-debug-non-zts-20170718 

		modificación .htaccess para URLs amigables

#/.htaccess
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteRule  ^$ public/    [L]
    RewriteRule  (.*) public/$1 [L]
</IfModule>
Todas las peticiones al proyecto serán dirigidas al directorio public/ ejerciendo este como directorio raíz. Este paso asegura que los archivos internos del proyecto permanezcan ocultos del público evitando posibles problemas de seguridad.
El segundo conjunto de reglas permitirá servir los archivos existentes y redireccionar lo demás al bootstrap de la aplicación:
#/public/.htaccess
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^(.*)$ index.php?_url=/$1 [QSA,L]
</IfModule>
Bootstrap¶
El primer archivo que debes crear es el bootstrap. Este archivo es muy importante, ya que sirve como base de tu aplicación, dándote control sobre muchos aspectos en ella. En este archivo podemos implementar la inicialización de componentes así como cambiar el comportamiento de la aplicación.
El archivo public/index.php debería verse así:
<?php

try {

    //Registrar un autocargador
    $loader = new \Phalcon\Loader();
    $loader->registerDirs(array(
        '../app/controllers/',
        '../app/models/'
    ))->register();

    //Crear un Inyector de dependencias
    $di = new \Phalcon\DI\FactoryDefault();

    //Configurar el componente de vistas
    $di->set('view', function(){
        $view = new \Phalcon\Mvc\View();
        $view->setViewsDir('../app/views/');
        return $view;
    });

    //Atender la petición
    $application = new \Phalcon\Mvc\Application($di);

    echo $application->handle()->getContent();

} catch(\Phalcon\Exception $e) {
     echo "PhalconException: ", $e->getMessage();
}
Autocargadores¶
La primera parte que encontramos en el bootstrap es el registro de un autocargador. Este será usado para cargar clases como controladores y modelos en la aplicación. Por ejemplo podemos registrar uno o más directorios de controladores incrementando la flexibilidad de la aplicación.
En nuestro ejemplo hemos usado el componente Phalcon\Loader. Con él, podemos cargar clases usando varias estrategias, para este ejemplo vamos a cargar las clases basado en unos directorios predeterminados.
<?php

$loader = new \Phalcon\Loader();
$loader->registerDirs(
    array(
        '../app/controllers/',
        '../app/models/'
    )
)->register();
Administración de Dependencias¶
Un concepto muy importante que debemos entender al trabajar con Phalcon es su contenedor/inyector de dependencias. Puede sonar complejo pero en realidad es muy sencillo y práctico.
Un contenedor de servicios es una bolsa donde globalmente registramos los servicios que nuestra aplicación necesita para trabajar. Cada vez que requerimos un componente, le solicitaremos al contenedor el servicio usando un nombre previamente convenido. Ya que Phalcon es un framework libremente acoplado, Phalcon\DI actúa como intermediario facilitando la integración de los diferentes componentes logrando que trabajen juntos de manera transparente.
<?php

//Crear un DI
$di = new Phalcon\DI\FactoryDefault();
Phalcon\DI\FactoryDefault es una variante de Phalcon\DI. Para hacer las cosas más fáciles, él ya tiene registrado la mayoría de componentes que vienen con Phalcon. De esta manera no debemos registrarlos uno a uno. Puedes reemplazar un componente por otro en cualquier momento que lo desees.
Luego, registramos el servicio ‘view’, en él indicamos el directorio que el framework debe utilizar para cargar los archivos de vistas. Como las vistas no son clases como tal, ellas no pueden ser cargadas usando un autocargadores.
Los servicios pueden ser registrados de muchas maneras, para nuestro tutorial usaremos funciones anónimas:
<?php

//Configurar el componente de vistas
$di->set('view', function(){
    $view = new \Phalcon\Mvc\View();
    $view->setViewsDir('../app/views/');
    return $view;
});
En la última parte, encontramos a Phalcon\Mvc\Application. Su proposito es inicializar el entorno de la petición, enrutar, descubrir las acciones relacionadas, produciendo las respuestas para el cliente.
<?php

$application = new \Phalcon\Mvc\Application($di);

echo $application->handle()->getContent();
En resúmen, como puedes ver el bootstap es muy pequeño y no requiere archivos externos. Hemos configurado un MVC muy flexible en menos de 30 líneas de código.
Creando un Controlador¶
Por defecto Phalcon buscará un controlador llamado “Index”. Este es el punto de inicio cuando no se ha indicado una ruta o acción especifica en la petición. El controlador Index (app/controllers/IndexController.php) se ve así:
<?php

class IndexController extends \Phalcon\Mvc\Controller
{

    public function indexAction()
    {
        echo "<h1>Hola!</h1>";
    }

}
